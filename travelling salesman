from itertools import permutations
def calculate_total_distance(graph, path):
    total_distance = 0
    n = len(path)
    for i in range(n - 1):
        total_distance += graph[path[i]][path[i + 1]]
    total_distance += graph[path[-1]][path[0]]
    return total_distance
def tsp_bruteforce(graph):
    n = len(graph)
    cities = list(range(n))
    all_paths = permutations(cities)
    min_path = None
    min_distance = float('inf')
    for path in all_paths:
        current_distance = calculate_total_distance(graph, path)
        if current_distance < min_distance:
            min_distance = current_distance
            min_path = path
    return min_path, min_distance
if __name__ == "__main__":
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]
    optimal_path, optimal_distance = tsp_bruteforce(graph)
    print("Optimal path:", optimal_path)
    print("Optimal distance:", optimal_distance)
